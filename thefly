
: "${FLY_HOME:=$HOME}"

type uuidgen >/dev/null 2>&1 || uuidgen() {
    tr -dc 'a-f0-9' </dev/urandom| head -c 16
}

function _fhttp_extract {
    curl -s -o .fly.pak -L "$2" || exit 1
    _fuuid=$(tar -xzf .fly.pak .fly.d/.flyuuid -O)
    [ ! "$_fuuid" ] && echo "not fly package" && exit 1
    [ "$1" = "remote" ] && FLY_HOME="/tmp/.fly.$USER/$_fuuid"
    (umask 077;mkdir -p "$FLY_HOME")
    type gtar >/dev/null 2>&1 && _ftar=gtar || _ftar=tar
    $_ftar -xzf .fly.pak -C $FLY_HOME
    rm -f .fly.pak
}

function _fgit_extract {
    _fuuid=$(curl -L -s "https://raw.githubusercontent.com/$2/main/.flyuuid") || exit 1
    [ ! "$_fuuid" ] && echo "not fly repo" && exit 1
    [ "$1" = "remote" ] && FLY_HOME="/tmp/.fly.$USER/$_fuuid"
    [ -d "$FLY_HOME/.fly.d/.git" ] && return
    (umask 077;mkdir -p "$FLY_HOME")
    \cd "$FLY_HOME" || exit 1
    git clone --recurse-submodules --remote-submodules -j8 "https://github.com/$2" .fly.d -q 2>/dev/null || \
    git clone --recursive "https://github.com/$2" .fly.d -q >/dev/null
}

function _finit
{
    (umask 077;mkdir -p "$FLY_HOME/.fly.d/plugins")
    [ -f "$FLY_HOME/.fly.d/.flyrc" ] || touch "$FLY_HOME/.fly.d/.flyrc" "$FLY_HOME/.fly.d/.flyrc.bash" "$FLY_HOME/.fly.d/.flyrc.zsh" "$FLY_HOME/.fly.d/.flyrc.ksh"
    [ -f "$FLY_HOME/.fly.d/.flyuuid" ] || uuidgen >"$FLY_HOME/.fly.d/.flyuuid"
    [ -d "$FLY_HOME/.fly.d/.git" ] || (\cd "$FLY_HOME/.fly.d" && { git init;git -M main; git checkout -b main; }) >/dev/null 2>&1
}

case "$1" in
    install|remote)
        unset _floaded
        [ "$1" =  "remote" ] && {
            (umask 077;mkdir -p "/tmp/.fly.$USER")
            \cd "/tmp/.fly.$USER" || return 1
        }
        case "$2" in
            http*://*) _fhttp_extract "$1" "$2"; set -- loginshell;;
            */*)       _fgit_extract "$1" "$2"; set -- loginshell;;
            '')        _finit; [ "$1" = install ] && set -- source || set -- loginshell;;
        esac
    ;;
    *)  echo "usage: source thefly [install|remote] [<url .fly.tgz>|<git owner/<repo>]"
        return 1
    ;;
esac

cat - >"$FLY_HOME/.fly.d/fly" <<'EOFLY' && . "$FLY_HOME/.fly.d/fly"
[ "$_floaded" ] && return
echo "Bzzz Bzzz !!!" >&2
_floaded=1
: "${FLY_HOME:=$HOME}"
: "${_fgithub=https://github.com}"
: "${FLY_USER_RC:=true}"
: "${FLY_ETC_RC:=true}"
: "${_fuuid:=$(cat "$FLY_HOME/.fly.d/.flyuuid" 2>/dev/null || uuidgen)}"
: "${_ftmpdir:="/tmp/.fly.\$USER/$_fuuid"}"
type gtar >/dev/null 2>&1 && _ftar=gtar || _ftar=tar

function _fshell
{
    FLY_SHELL=$_fdestshell
    unset _fdestshell
    [ "$FLY_SHELL" ] && return
    case "$KSH_VERSION$BASH$ZSH_VERSION" in
        "$KSH_VERSION") FLY_SHELL=ksh;;
        "$BASH")        FLY_SHELL=bash;;
        "$ZSH_VERSION") FLY_SHELL=zsh;;
        *) echo unsupported;;
    esac
}

function _fpackage
{
    $_ftar -czf - -C "$FLY_HOME" --no-xattrs --exclude-vcs --exclude=README.md --exclude='plugins/*/.*' --exclude '*/*/tests' .fly.d
}

function _fxpackage
{
    printf 'type gtar >/dev/null 2>&1 && _ftar=gtar || _ftar=tar;'
    printf 'umask 077;mkdir -p "%s";' "$_ftmpdir"
    printf '! chmod 700 "%s" && echo "Not owner of %s. Abort >&2" && exit 1;' "${_ftmpdir%/*}" "${_ftmpdir%/*}"
    printf '$_ftar -xzf - -C "%s" --no-same-owner' "$_ftmpdir"
}

function _fzsh_glob
{
    [ "$FLY_SHELL" = "zsh" ] || return 0
    case "$1" in
    fix)   [[ ! -o nonomatch ]] && _fzsh_nonomatch=1 && setopt nonomatch;;
    reset) [ "$_fzsh_nomatch" ] && unset _fzsh_nonomatch && unsetopt nonomatch;;
    esac
}

function _fsource_plugins
{
    typeset p="$1" plugin plugindir="$FLY_HOME/.fly.d/plugins"

    [ -r "$FLY_HOME/.fly.d/.flyrc" ] && . "$FLY_HOME/.fly.d/.flyrc"
    [ -r "$FLY_HOME/.fly.d/.flyrc.$FLY_SHELL" ] && . "$FLY_HOME/.fly.d/.flyrc.$FLY_SHELL"
    _fzsh_glob fix
    for plugin in $([ "$p" ] && ls -- "$plugindir/$p/"*.plugin."$FLY_SHELL" 2>/dev/null || \
                                ls -- "$plugindir/"*/*.plugin."$FLY_SHELL" 2>/dev/null)
    do
        \cd "${plugin%/*}" && { . "$plugin"; \cd "$OLDPWD"; }
    done
    _fzsh_glob reset
}

function _fsource_profile_bash
{
    \cd /;\cd
    alias typeset="typeset +r"
    alias readonly=typeset
    $FLY_ETC_RC && . /etc/profile
    $FLY_USER_RC && for i in .bash_profile .bash_login .profile;do
        [ -r "$i" ] && . "./$i" && break
    done
    unalias typeset
    unalias readonly
}

function _fsource_profile_zsh
{
    \cd /;\cd
    ZDOTDIR=~/
    for i in zshenv zprofile zshrc;do
        [ -r /etc/zsh/$i ] && $FLY_ETC_RC && . /etc/zsh/$i
        [ -r .$i ] && $FLY_USER_RC && . ./.$i
    done
    typeset +r PS1
}

function _fsource_profile_ksh
{
    \cd /;\cd
    typeset +x ENV
    ENV=~/.kshrc
    #alias typeset="typeset +r"
    alias readonly=typeset
    $FLY_ETC_RC && . /etc/profile
    [ -r .profile ] && $FLY_USER_RC && . ./.profile
    [ -r "$ENV" ] && $FLY_USER_RC && . $ENV
    unalias typeset
    unalias readonly
}

function _fsource_profile
{
    eval "_fsource_profile_$FLY_SHELL"
    FLY_ETC_RC=true FLY_USER_RC=true
    _fsource_plugins
}

function _flogin_shell
{
    typeset shell="${1:-$FLY_SHELL}"
    case "$shell" in 
    bash) _flogin_rc >$FLY_HOME/.fly.d/.bashrc && exec bash --noprofile --init-file $FLY_HOME/.fly.d/.bashrc;;
    zsh)  _flogin_rc >$FLY_HOME/.fly.d/.zshrc && ZDOTDIR=$FLY_HOME/.fly.d exec zsh -di;;
    ksh)  _flogin_rc >$FLY_HOME/.fly.d/.kshrc && ENV=$FLY_HOME/.fly.d/.kshrc exec ksh -i;;
    esac
}

function _flogin_rc
{
    printf 'FLY_HOME="%s"\n' "$FLY_HOME"
    printf 'FLY_USER_RC="%s"\n' "$FLY_USER_RC"
    printf 'FLY_ETC_RC="%s"\n' "$FLY_ETC_RC"
    printf '. "%s/.fly.d/fly" login\n' "$FLY_HOME"
}

function fsudo
{
    typeset user=${1:-root} 
    _fpackage |sudo -H -u "$user" $FLY_SHELL -c "$(_fxpackage)" || return $?
    sudo -H -u "$user" -i FLY_USER_RC="$FLY_USER_RC" FLY_ETC_RC="$FLY_ETC_RC" _fdestshell="$_fdestshell" . "$_ftmpdir/.fly.d/fly" loginshell "$_ftmpdir"
}

function _fssh_cmd
{
    typeset b64opt
    echo ok |base64 -w0 >/dev/null 2>&1 && b64opt='-w0'
    cat - <<EOF
printf '$(_fpackage |base64 $b64opt)' |base64 -d |($(_fxpackage))
_fdestshell="$_fdestshell"
FLY_USER_RC="$FLY_USER_RC"
FLY_ETC_RC="$FLY_ETC_RC"
_fuuid="$_fuuid" . "$_ftmpdir/.fly.d/fly" loginshell "$_ftmpdir"
EOF
}

function _fssh_ok
{
    typeset ssh_ver
    _fssh_ok=false
    type ssh >/dev/null 2>&1 || return
    typeset ssh_ver="$(ssh -V 2>&1)"
    ssh_ver="${ssh_ver%% *}";ssh_ver="${ssh_ver#*_}";ssh_ver="${ssh_ver%p*}"
    [[ "$ssh_ver" = *.*.* ]] && ssh_ver="${ssh_ver%.*}"
    ssh_maj=${ssh_ver%.*}
    [[ "$ssh_maj" > 8 ]] && _fssh_ok=true 
}

function fssh
{
    ! $_fssh_ok && { fssh2 "$@"; return; } 
    typeset ssh_config cmd
    for i in "$@";do
       [ "$i" = -F ] && shift && ssh_config="Include $1" && shift && continue
       shift
       set -- "$@" "$i"
    done
    [ ! "$ssh_config" ] && [ -f ~/.ssh/config ] && ssh_config="Include $HOME/.ssh/config"
    cmd="$(_fssh_cmd)"
    cmd="${cmd//$'\n'/;}"
    cat - <<EOF >"$FLY_HOME/.fly_ssh"
$ssh_config
RemoteCommand $cmd
EOF
    ssh -t -F "$FLY_HOME/.fly_ssh" "$@"
}

function fssh2
{
    _fpackage | ssh -o LogLevel=Error "$@" "$(_fxpackage)" || return $?
    ssh "$@" -t '. '"$_ftmpdir"'/.fly.d/fly loginshell '"$_ftmpdir"''
}


function fly
{
    typeset plugin submodule
    case "$1" in
    add)
        [ -d "$FLY_HOME/.fly.d/.git" ] && {
            (\cd "$FLY_HOME/.fly.d" && git submodule add "$_fgithub/$2" "plugins/${2##*/}" 2>/dev/null)
        } || (\cd "$FLY_HOME/.fly.d/plugins" && git clone "$_fgithub/$2" -q)
        _fsource_plugins "${2#*/}"
    ;;
    del)
        [ -d "$FLY_HOME/.fly.d/.git" ] && {
            (\cd "$FLY_HOME/.fly.d" && git submodule deinit -f "plugins/${2##*/}" 2>/dev/null)
        }
        rm -rf "$FLY_HOME/.fly.d/plugins/${2##*/}"
    ;;
    update)
        [ ! "$2" ] && echo "usage: fly update <plugin>" && return 1 
        (\cd "$FLY_HOME/.fly.d/plugins/${2#*/}" && git pull origin "$(git rev-parse --abbrev-ref HEAD)")
        _fsource_plugins "${2#*/}"
    ;;
    updateall)
        _fzsh_glob fix
        for plugin in $(ls -d "$FLY_HOME/.fly.d/plugins"/*/.git) ;do
            [ -d "$plugin" ] && (\cd "$plugin/.." && git pull origin "$(git rev-parse --abbrev-ref HEAD)")
            [ -s "$plugin" ] && submodule=1
        done
        [ "$submodule" ] && (\cd $FLY_HOME/.fly.d && { 
            git submodule update --remote --merge 2>/dev/null
            git submodule foreach git pull 2>/dev/null
        })
        _fzsh_glob reset
        _fsource_plugins
    ;;
    list)
        _fzsh_glob fix
        (\cd "$FLY_HOME/.fly.d/plugins" && ls -1 -- */*.plugin.$FLY_SHELL)
        _fzsh_glob reset
    ;;
    source)
        _fsource_plugins
    ;;
    shell) FLY_SHELL="${2:-$FLY_SHELL}" "_flogin_shell";;
    esac
}

_fshell
_fssh_ok

case "$1" in
    login)      _fsource_profile;;
    loginshell) FLY_HOME="${2:-$FLY_HOME}";_flogin_shell $_fdestshell;;
    source)     _fsource_plugins;;
esac

alias fbash='fly shell bash'
alias fzsh='fly shell zsh'
alias fksh='fly shell ksh'
alias fsshb='_fdestshell=bash fssh'
alias fsshz='_fdestshell=zsh fssh'
alias fsshk='_fdestshell=ksh fssh'
alias fsudob='_fdestshell=bash fsudo'
alias fsudoz='_fdestshell=zsh fsudo'
alias fsudok='_fdestshell=ksh fsudo'

EOFLY
