
: "${_fenvdir:=$HOME}"
case "$1" in
install|loginshell)
    unset _floaded
    (umask 077;mkdir -p "$_fenvdir/.fly.d/plugins")
    [ -f "$_fenvdir/.fly.d/.flyrc" ] || touch "$_fenvdir/.fly.d/.flyrc"
    [ -f "$_fenvdir/.fly.d/.flyuuid" ] || uuidgen >"$_fenvdir/.fly.d/.flyuuid"
    echo "TheFly: install in $_fenvdir/.fly.d/fly" >&2
    echo "TheFly: Put in your shell profile to load thefly/plugins at login:" >&2
    echo "TheFly:   source $_fenvdir/.fly.d/fly source" >&2
    echo "TheFly: To add shell pluggins from github use:" >&2
    echo "TheFly:   fly add <git owner>/<repo>" >&2
    ;;
*)  echo "usage: source thefly [install|remote]"
    return 1
    ;;
esac

cat - >"$_fenvdir/.fly.d/fly" <<'EOFLY' && . "$_fenvdir/.fly.d/fly"
[ "$_floaded" ] && return
echo "Bzzz Bzzz !!!" >&2
_floaded=1
: "${_fenvdir:=$HOME}"
: "${_fgithub=https://github.com}"
: "${FLY_USER_RC=true}"
: "${FLY_ETC_RC=true}"
: "${_fuuid:=$(cat "$_fenvdir/.fly.d/.flyuuid" 2>/dev/null || uuidgen)}"
: "${_ftmpdir:="/tmp/.fly.\$USER/$_fuuid"}"

function _fshell
{
    FLY_SHELL=$_fdestshell
    unset _fdestshell
    [ "$FLY_SHELL" ] && return
    case "$KSH_VERSION$BASH$ZSH_VERSION" in
        "$KSH_VERSION") FLY_SHELL=ksh;;
        "$BASH")        FLY_SHELL=bash;;
        "$ZSH_VERSION") FLY_SHELL=zsh;;
        *) echo unsupported;;
    esac
}

function _fpackage
{
    tar czf - -C "$_fenvdir" --no-xattrs --exclude-vcs --exclude=README.md --exclude='*/*/.*' --exclude '*/*/tests' .fly.d
}

function _fxpackage
{
    printf '%s;' 'umask 077' 'mkdir -p "'"$_ftmpdir"'"'
    #printf '%s;' '! chmod 700 "'"$_ftmpdir"'" && echo "Not owner of '"$_ftmpdir"'. Abort >&2" && exit 1'
    printf '%s' 'tar xzf - -C "'"$_ftmpdir"'"'
}

function _fzsh_glob
{
    [ "$FLY_SHELL" = "zsh" ] || return
    case "$1" in
    fix)   [[ ! -o nonomatch ]] && _fzsh_nonomatch=1 && setopt nonomatch;;
    reset) [ "$_fzsh_nomatch" ] && unset _fzsh_nonomatch && unsetopt nonomatch;;
    esac
}

function _fsource_plugins
{
    typeset p="$1" plugin plugindir="$_fenvdir/.fly.d/plugins"

    [ -r "$_fenvdir/.fly.d/.flyrc" ] && . "$_fenvdir/.fly.d/.flyrc"
    [ -r "$_fenvdir/.fly.d/.flyrc.$FLY_SHELL" ] && . "$_fenvdir/.fly.d/.flyrc.$FLY_SHELL"
    _fzsh_glob fix
    for plugin in $([ "$p" ] && ls -- "$plugindir/$p/"*.plugin."$FLY_SHELL" 2>/dev/null || \
                                ls -- "$plugindir/"*/*.plugin."$FLY_SHELL" 2>/dev/null)
    do
        \cd "${plugin%/*}" && { . "$plugin"; \cd "$OLDPWD"; }
    done
    _fzsh_glob reset
}

function _fsource_profile_bash
{
    \cd /;\cd
    alias typeset="typeset +r"
    alias readonly=typeset
    $FLY_ETC_RC && . /etc/profile
    $FLY_USER_RC && for i in .bash_profile .bash_login .profile;do
        [ -r "$i" ] && . "./$i" && break
    done
    unalias typeset
    unalias readonly
}

function _fsource_profile_zsh
{
    \cd /;\cd
    ZDOTDIR=~/
    for i in zshenv zprofile zshrc;do
        [ -r /etc/zsh/$i ] && $FLY_ETC_RC && . /etc/zsh/$i
        [ -r .$i ] && $FLY_USER_RC && . ./.$i
    done
    typeset +r PS1
}

function _fsource_profile_ksh
{
    \cd /;\cd
    typeset +x ENV
    ENV=~/.kshrc
    #alias typeset="typeset +r"
    alias readonly=typeset
    $FLY_ETC_RC && . /etc/profile
    [ -r .profile ] && $FLY_USER_RC && . ./.profile
    [ -r "$ENV" ] && $FLY_USER_RC && . $ENV
    unalias typeset
    unalias readonly
}

function _fsource_profile
{
    eval "_fsource_profile_$FLY_SHELL"
    FLY_HOST_PROFILE=true FLY_USER_PROFILE=true
    _fsource_plugins
}

function _flogin_shell
{
    typeset shell="${1:-$FLY_SHELL}"
    case "$shell" in 
    bash) _flogin_rc >$_fenvdir/.fly.d/.bashrc && exec bash --noprofile --init-file $_fenvdir/.fly.d/.bashrc;;
    zsh)  _flogin_rc >$_fenvdir/.fly.d/.zshrc && ZDOTDIR=$_fenvdir/.fly.d exec zsh -di;;
    ksh)  _flogin_rc >$_fenvdir/.fly.d/.kshrc && ENV=$_fenvdir/.fly.d/.kshrc exec ksh -i;;
    esac
}

function _flogin_rc
{
    typeset fenvd="${1:-$_fenvdir}"
    printf '%s\n' "FLY_USER_RC=$FLY_USER_RC"
    printf '%s\n' "FLY_ETC_RC=$FLY_ETC_RC"
    printf '%s\n' ". $fenvd/.fly.d/fly login $fenvd"
}

function fsudo
{
    typeset user=${1:-root} 
    _fpackage |sudo -H -u "$user" $FLY_SHELL -c "$(_fxpackage)" || return $?
    sudo -H -u "$user" -i FLY_USER_RC="$FLY_USER_RC" FLY_ETC_RC="$FLY_ETC_RC" _fdestshell="$_fdestshell" "_fuuid=$_fuuid" . "$_ftmpdir/.fly.d/fly" loginshell "$_ftmpdir"
}

function _fssh_cmd
{
    typeset b64opt
    echo ok |base64 -w0 >/dev/null 2>&1 && b64opt='-w0'
    cat - <<EOF
echo $(_fpackage |base64 $b64opt) |base64 -d |($(_fxpackage))
_fdestshell="$_fdestshell"
FLY_USER_RC="$FLY_USER_RC"
FLY_ETC_RC="$FLY_ETC_RC"
_fuuid="$_fuuid" . "$_ftmpdir/.fly.d/fly" loginshell "$_ftmpdir"
EOF
}

function _fssh_ok
{
    typeset ssh_ver
    _fssh_ok=false
    type ssh >/dev/null 2>&1 || return
    typeset ssh_ver="$(ssh -V 2>&1)"
    ssh_ver="${ssh_ver%% *}";ssh_ver="${ssh_ver#*_}";ssh_ver="${ssh_ver%p*}"
    [[ "$ssh_ver" = *.*.* ]] && ssh_ver="${ssh_ver%.*}"
    ssh_maj=${ssh_ver%.*}
    [[ "$ssh_maj" > 8 ]] && _fssh_ok=true 
}

function fssh
{
    ! $_fssh_ok && { fssh2 "$@"; return; } 
    typeset ssh_config cmd
    for i in "$@";do
       [ "$i" = -F ] && shift && ssh_config="Include $1" && shift && continue
       shift
       set -- "$@" "$i"
    done
    [ ! "$ssh_config" ] && [ -f ~/.ssh/config ] && ssh_config="Include $HOME/.ssh/config"
    cmd="$(_fssh_cmd)"
    cmd="${cmd//$'\n'/;}"
    cat - <<EOF >"$_fenvdir/.fly_ssh"
$ssh_config
RemoteCommand $cmd
EOF
    ssh -t -F "$_fenvdir/.fly_ssh" "$@"
}

function fssh2
{
    _fpackage | ssh -o LogLevel=Error "$@" "$(_fxpackage)" || return $?
    ssh "$@" -t '. '"$_ftmpdir"'/.fly.d/fly loginshell '"$_ftmpdir"''
}


function fly
{
    typeset plugin
    case "$1" in
    add)
        (umask 077;mkdir -p "$_fenvdir/.fly.d/plugins")
        (\cd "$_fenvdir/.fly.d/plugins" && git clone "$_fgithub/$2")
        _fsource_plugins "${2#*/}"
    ;;
    update)
        [ ! "$2" ] && echo "usage: fly update <plugin>" && return 1 
        (\cd "$_fenvdir/.fly.d/plugins/${2#*/}" && git pull origin "$(sed -e 's#.*/##' .git/HEAD)")
        _fsource_plugins "${2#*/}"
    ;;
    updateall)
        _fzsh_glob fix
        for plugin in $(ls -d "$_fenvdir/.fly.d/plugins"/*/.git) ;do
            (\cd "$plugin/.." && git pull origin "$(sed -e 's#.*/##' .git/HEAD)")
        done
        _fzsh_glob reset
        _fsource_plugins
    ;;
    list)
        _fzsh_glob fix
        (\cd "$_fenvdir/.fly.d/plugins" && ls -1 -- */*.plugin.$FLY_SHELL)
        _fzsh_glob reset
    ;;
    source)
        _fsource_plugins
    ;;
    shell) FLY_SHELL="${2:-$FLY_SHELL}" "_flogin_shell";;
    esac
}

_fshell
_fssh_ok

# ssh -t xxx . <(curl -s http://xxx/thefly) --url http://xxx/thefly.tgz
[ "$1" = "--url" ] && {
    \cd "$_fenvdir"
    curl -o ./.fly.pak -L "$2"
    tar tzvf .fly.pak |grep -qv ' .flyrc'
    [ $? = 0 ] && echo "not fly package" && return
    tar xzf .fly.pak
    _flogin_shell
}

[ "$1" = "--git" ] && {
    \cd "$_fenvdir"
    git clone "$_fgithub/$3" .fly.d
    _flogin_shell
}

case "$1" in
    login) _fenvdir="${2:-$_fenvdir}";_fsource_profile;;
    loginshell) _fenvdir="${2:-$_fenvdir}";_flogin_shell $_fdestshell;;
    source) _fsource_plugins;;
esac
alias fbash='fly shell bash'
alias fzsh='fly shell zsh'
alias fksh='fly shell ksh'
alias fsshb='_fdestshell=bash fssh'
alias fsshz='_fdestshell=zsh fssh'
alias fsshk='_fdestshell=ksh fssh'
alias fsudob='_fdestshell=bash fsudo'
alias fsudoz='_fdestshell=zsh fsudo'
alias fsudok='_fdestshell=ksh fsudo'

EOFLY
